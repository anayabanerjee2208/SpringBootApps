#Configure the API Gateway as Eureka Client to Eureka Server
eureka.instance.client.serverUrl.defaultZone=http://localhost:8761/eureka/
spring.application.name=API-GATEWAY
server.port=9191

#Configuring service id and port manually in Api Gateway properties, instead of using discovery locator feature.
#http://localhost:9191/api/employees/2
###Routes for Employee Service
spring.cloud.gateway.routes[0].id=EMPLOYEE-SERVICE
###configure load balancer
spring.cloud.gateway.routes[0].uri=lb://EMPLOYEE-SERVICE
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/employees/**
#
###Routes for Department Service
spring.cloud.gateway.routes[1].id=DEPARTMENT-SERVICE
###configure load balancer
spring.cloud.gateway.routes[1].uri=lb://DEPARTMENT-SERVICE
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/departments/**

###Routes for Organisation Service
spring.cloud.gateway.routes[2].id=ORGANISATION-SERVICE
spring.cloud.gateway.routes[2].uri=lb://ORGANISATION-SERVICE
spring.cloud.gateway.routes[2].predicates[0]=Path=/api/organisations/**



##If we are using discovery locator feature to locate the service url and port in api gateway, then while calling the
##api we have to pass the service id in the url, http://localhost:9191/employee-service/api/employees/2
##Enable discovery client integration
#spring.cloud.gateway.discovery.locator.enabled=true
#spring.cloud.gateway.discovery.locator.lower-case-service-id=true


logging.level.org.springframework.cloud.gateway.handler.RoutePredicateHandlerMapping=DEBUG

management.tracing.sampling.probability=1.0 
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]
logging.level.org.springframework.web=DEBUG

spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedOrigins=http://localhost:3000/
spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedMethods=GET,POST,PUT,DELETE
